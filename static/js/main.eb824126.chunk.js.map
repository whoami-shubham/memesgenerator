{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","src","alt","React","Component","htmlToImage","require","console","log","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","assertThisInitialized","fun","download","_this2","fetch","then","res","json","response","memes","data","setState","event","preventDefault","node","document","getElementById","toPng","dataUrl","img","Image","body","appendChild","catch","error","_event$target","target","name","value","defineProperty","index","Math","floor","random","length","url","className","onSubmit","type","placeholder","onChange","id","App","Header_Header","MemeGenerator_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb824126.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Header extends React.Component{\r\n  render(){\r\n    return (\r\n      <header><img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"Problem?\" /> <span>Meme Generator</span> </header>\r\n    )\r\n  }\r\n}","/*\r\nhttps://api.imgflip.com/get_memes\r\n*/\r\nimport React from 'react'\r\nconst htmlToImage = require('html-to-image')\r\nconsole.log(htmlToImage) \r\nexport default class MemeGenerator extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            topText:\"One One Does Not Simply\",\r\n            bottomText:\"Program in Linux\",\r\n            randomImg:\"https://imgflip.com/s/meme/One-Does-Not-Simply.jpg\",\r\n            allMemeImgs:[]\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.fun = this.fun.bind(this)\r\n        this.download = this.download.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(res => res.json())\r\n            .then((response) => {\r\n                const {memes} = response.data\r\n                this.setState({allMemeImgs:memes})\r\n            })\r\n    }\r\n    download(event){\r\n        event.preventDefault()\r\n        var node = document.getElementById('meme');\r\n            htmlToImage.toPng(node)\r\n            .then(function (dataUrl) {\r\n                var img = new Image();\r\n                img.src = dataUrl;\r\n                document.body.appendChild(img);\r\n                //console.log(dataUrl)\r\n            })\r\n            .catch(function (error) {\r\n                console.error('oops, something went wrong!', error);\r\n            });\r\n            \r\n    }\r\n    handleChange(event){\r\n        const {name,value} = event.target\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n    fun(event){\r\n        event.preventDefault();\r\n        const index = Math.floor(Math.random()*this.state.allMemeImgs.length)\r\n        const url = this.state.allMemeImgs[index].url\r\n        //console.log(url)\r\n        this.setState({\r\n            randomImg:url\r\n        })\r\n    }\r\n  render(){\r\n    return (\r\n      <div>\r\n      <form className=\"meme-form\" onSubmit={this.fun}>\r\n      <input type=\"text\" placeholder=\"Top Text\" name=\"topText\" value={this.state.topText} onChange ={this.handleChange} /> \r\n      <input type=\"text\" placeholder=\"Bottom Text\" name=\"bottomText\" value={this.state.bottomText} onChange ={this.handleChange} />\r\n      <button >Gen</button>\r\n      </form>\r\n      <div className=\"meme\" id=\"meme\">\r\n         <img src={this.state.randomImg} alt=\"\" />\r\n         <h2 className=\"top\">{this.state.topText}</h2>\r\n         <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport Header from './Header'\r\nimport MemeGenerator from './MemeGenerator'\r\nimport htmlToImage from 'html-to-image'\r\nexport default class App extends React.Component{\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <Header />\r\n         <div className=\"container\">\r\n            <div className=\"row\">\r\n                <center><div className=\"col-12\"><MemeGenerator /></div></center>\r\n            </div>\r\n         </div>\r\n      </div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}